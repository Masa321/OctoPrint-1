// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.PrinterCommClass = (function() {

    function PrinterCommClass(url, useWebsocket, printer_session_key) {
      this.receiveFile = __bind(this.receiveFile, this);

      this.receiveCommand = __bind(this.receiveCommand, this);

      this.destroyPort = __bind(this.destroyPort, this);

      this.connectPort = __bind(this.connectPort, this);

      this.statusUpdate = __bind(this.statusUpdate, this);

      this.bindEvents = __bind(this.bindEvents, this);
      this.dispatcher = new WebSocketRails(url, useWebsocket);
      this.channel = this.dispatcher.subscribe("printer_session_" + printer_session_key);
    }

    PrinterCommClass.bindEvents();

    PrinterCommClass.prototype.bindEvents = function() {
      var _this = this;
      this.channel.bind('open_connection', this.connectPort);
      this.channel.bind('close_connection', this.destroyPort);
      this.channel.bind('request_status', this.statusUpdate);
      this.channel.bind('user_command', this.receiveCommand);
      this.channel.bind('user_file', this.receiveFile);
      return {
        sendStatus: function(current_status) {
          return _this.dispatcher.trigger("new_status", {
            secret: secret_key,
            status: current_status
          });
        }
      };
    };

    PrinterCommClass.prototype.statusUpdate = function(event) {
      var res_code, self;
      res_code = {
        get_connection_f: null,
        get_connection: null,
        get_job_f: null,
        get_job: null
      };
      self = this;
      $.when(get_connection(api_key), get_job(api_key)).then(function(data0, data1) {
        res_code = set_status(res_code, "get_connection", true, data0[0]);
        res_code = set_status(res_code, "get_job", true, data1[0]);
        return res_code;
      }, function(data0, data1) {
        res_code = set_status(res_code, "get_connection", false, data0[0]);
        res_code = set_status(res_code, "get_job", false, data1[0]);
        return res_code;
      }).then(function(callback) {
        self.sendStatus(callback);
      });
    };

    PrinterCommClass.prototype.connectPort = function(message) {
      post_connection(api_key, message).done(function(data, status, xhr) {}).fail(function(xhr, status) {});
    };

    PrinterCommClass.prototype.destroyPort = function(message) {
      return console.log("DESTROY!!!!");
    };

    PrinterCommClass.prototype.receiveCommand = function(query) {};

    PrinterCommClass.prototype.receiveFile = function(file) {};

    return PrinterCommClass;

  })();

}).call(this);
