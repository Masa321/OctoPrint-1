// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.PrinterCommClass = (function() {
    function PrinterCommClass(url, useWebsocket, fabrica_session_id, octoprint_key) {
      this.sendCommandResponse = __bind(this.sendCommandResponse, this);
      this.sendStatusUpdate = __bind(this.sendStatusUpdate, this);
      this.userCommandReceive = __bind(this.userCommandReceive, this);
      this.statusReceive = __bind(this.statusReceive, this);
      this.statusUpdate = __bind(this.statusUpdate, this);
      this.receiveFile = __bind(this.receiveFile, this);
      this.bindEvents = __bind(this.bindEvents, this);
      this.dispatcher = new WebSocketRails(url, useWebsocket);
      this.channel = this.dispatcher.subscribe("printer_session_" + fabrica_session_id);
      this.auth_token = fabrica_session_id;
      this.session_key = octoprint_key;
      this.bindEvents();
    }

    PrinterCommClass.prototype.bindEvents = function() {
      this.channel.bind('request_status', this.statusUpdate);
      this.channel.bind('user_command_receive', this.userCommandReceive);
      return this.channel.bind('user_file', this.receiveFile);
    };

    PrinterCommClass.prototype.receiveFile = function(file) {
      var boundary_key, content, data, filename, header;
      boundary_key = randomString(16);
      filename = file["filename"];
      content = file["content"];
      header = 'multipart/form-data; boundary=----WebKitFormBoundary' + boundary_key;
      data = '------WebKitFormBoundary' + boundary_key + ' \n';
      data += 'Content-Disposition: form-data; name="file"; filename="' + filename + '" \n';
      data += 'Content-Type: application/octet-stream \n';
      data += content + ' \n';
      data += '\n------WebKitFormBoundary' + boundary_key + ' \n';
      data += 'Content-Disposition: form-data; name="select" \ntrue \n';
      data += '\n------WebKitFormBoundary' + boundary_key + ' \n';
      data += 'Content-Disposition: form-data; name="print" \n';
      data += 'true \n';
      data += '\n------WebKitFormBoundary' + boundary_key + '--';
      console.log(data);
      return $.ajax({
        url: "/api/files/local",
        type: "POST",
        headers: {
          "X-ApiKey": this.session_key
        },
        processData: false,
        contentType: header,
        data: data
      });
    };

    PrinterCommClass.prototype.statusUpdate = function(message) {
      var res_code, self;
      res_code = void 0;
      self = this;
      return $.when(this.statusReceive("/api/connection"), this.statusReceive("/api/job"), this.statusReceive("/api/files")).then(function(connection, job, files) {
        res_code = {
          "connection": connection[0],
          "job": job[0],
          "files": files[0]
        };
        self.sendStatusUpdate(res_code);
      }, function(connection, job, files) {
        res_code = {
          "connection": connection[0],
          "job": job[0],
          "files": files[0]
        };
        self.sendStatusUpdate(res_code);
        console.log("statusUpdate failed!");
        console.log(res_code);
      });
    };

    PrinterCommClass.prototype.statusReceive = function(url) {
      return $.ajax({
        url: url,
        type: "GET",
        dataType: "JSON",
        headers: {
          "X-ApiKey": this.session_key
        }
      });
    };

    PrinterCommClass.prototype.userCommandReceive = function(message) {
      var res_code, self;
      console.log(message);
      res_code = void 0;
      self = this;
      return $.when($.ajax({
        url: message["url"],
        type: message["type"],
        contentType: "application/json",
        headers: {
          "X-ApiKey": this.session_key
        },
        data: message["params"]
      })).then(function(response) {
        res_code = {
          "status": response["status"],
          "statusText": response["statusText"],
          "responseText": response["responseText"]
        };
        self.sendCommandResponse(res_code);
      }, function(response) {
        res_code = {
          "status": response["status"],
          "statusText": response["statusText"],
          "responseText": response["responseText"]
        };
        self.sendCommandResponse(res_code);
      });
    };

    PrinterCommClass.prototype.sendStatusUpdate = function(response) {
      this.dispatcher.trigger("box.status_update", {
        token: this.auth_token,
        status: response
      });
      console.log("status update done!");
      return console.log(response);
    };

    PrinterCommClass.prototype.sendCommandResponse = function(response) {
      return this.dispatcher.trigger("box.command_response", {
        token: this.auth_token,
        status: response
      });
    };

    return PrinterCommClass;

  })();

}).call(this);
