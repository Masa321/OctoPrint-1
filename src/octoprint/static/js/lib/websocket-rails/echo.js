// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.PrinterCommClass = (function() {
    function PrinterCommClass(url, websocket_url, fabrica_id, octoprint_key) {
      this.sendCommandResponse = __bind(this.sendCommandResponse, this);
      this.sendStatusUpdate = __bind(this.sendStatusUpdate, this);
      this.sendOauthRequest = __bind(this.sendOauthRequest, this);
      this.userCommand = __bind(this.userCommand, this);
      this.statusUpdate = __bind(this.statusUpdate, this);
      this.statusReceive = __bind(this.statusReceive, this);
      this.sendFile = __bind(this.sendFile, this);
      this.refresh = __bind(this.refresh, this);
      this.bindEvents = __bind(this.bindEvents, this);
      this.initBind = __bind(this.initBind, this);
      this.session_key = octoprint_key;
      this.dispatcher = new WebSocketRails(url, websocket_url);
      this.auth_channel = this.dispatcher.subscribe("request_token_" + fabrica_id);
      this.auth_channel.bind('oauth_callback', this.initBind);
      this.sendOauthRequest(fabrica_id);
    }

    PrinterCommClass.prototype.initBind = function(key) {
      this.auth_key = key;
      this.channel = this.dispatcher.subscribe("printer_session_" + this.auth_key);
      return this.bindEvents();
    };

    PrinterCommClass.prototype.bindEvents = function() {
      this.channel.bind('user_command', this.userCommand);
      this.channel.bind('user_file', this.sendFile);
      return this.channel.bind('machine_refresh', this.refresh);
    };

    PrinterCommClass.prototype.refresh = function() {
      return location.reload();
    };

    PrinterCommClass.prototype.sendFile = function(message) {
      var boundary_key, content, data, filename, header;
      console.log("dump file");
      console.log(message);
      boundary_key = randomString(16);
      filename = message["filename"];
      content = message["content"];
      header = 'multipart/form-data; boundary=----WebKitFormBoundary' + boundary_key;
      data = '------WebKitFormBoundary' + boundary_key + ' \n';
      data += 'Content-Disposition: form-data; name="file"; filename="' + filename + '" \n';
      data += 'Content-Type: application/octet-stream \n';
      data += content + ' \n';
      data += '\n------WebKitFormBoundary' + boundary_key + ' \n';
      if (message["select"]) {
        data += 'Content-Disposition: form-data; name="select"\n\ntrue';
      } else {
        data += 'Content-Disposition: form-data; name="select"\n\nfalse';
      }
      data += '\n------WebKitFormBoundary' + boundary_key + ' \n';
      if (message["print"]) {
        data += 'Content-Disposition: form-data; name="print"\n\ntrue';
      } else {
        data += 'Content-Disposition: form-data; name="print"\n\nfalse';
      }
      data += '\n------WebKitFormBoundary' + boundary_key + '--';
      console.log(data);
      return $.ajax({
        url: "/api/files/local",
        type: "POST",
        headers: {
          "X-ApiKey": this.session_key
        },
        processData: false,
        contentType: header,
        data: data
      });
    };

    PrinterCommClass.prototype.statusReceive = function(url) {
      return $.ajax({
        url: url,
        type: "GET",
        dataType: "JSON",
        contentType: "application/json",
        headers: {
          "X-ApiKey": this.session_key
        }
      });
    };

    PrinterCommClass.prototype.statusUpdate = function(message) {
      var res_code, self;
      res_code = void 0;
      self = this;
      return $.when(this.statusReceive("/api/connection"), this.statusReceive("/api/job"), this.statusReceive("/api/files")).then(function(connection, job, files) {
        res_code = {
          "connection": connection[0],
          "job": job[0],
          "files": files[0]
        };
        self.sendStatusUpdate(res_code);
      }, function(connection, job, files) {
        res_code = {
          "connection": connection[0],
          "job": job[0],
          "files": files[0]
        };
        self.sendStatusUpdate(res_code);
        console.log("statusUpdate failed!");
        console.log(res_code);
      });
    };

    PrinterCommClass.prototype.userCommand = function(message) {
      var res_code, self;
      console.log(message);
      res_code = void 0;
      self = this;
      return $.when($.ajax({
        url: message["url"],
        type: message["type"],
        dataType: "JSON",
        contentType: "application/json",
        headers: {
          "X-ApiKey": this.session_key
        },
        data: message["params"]
      })).then(function(response) {
        res_code = response;
        self.sendCommandResponse(res_code);
      }, function(response) {
        res_code = response;
        self.sendCommandResponse(res_code);
      });
    };

    PrinterCommClass.prototype.sendOauthRequest = function(fabrica_id) {
      this.dispatcher.trigger("box.oauth_request", {
        session_id: fabrica_id
      });
      return console.log("send oauth done!");
    };

    PrinterCommClass.prototype.sendStatusUpdate = function(response) {
      this.dispatcher.trigger("box.status_update", {
        token: this.auth_key,
        status: response
      });
      console.log("status update done!");
      return console.log(response);
    };

    PrinterCommClass.prototype.sendCommandResponse = function(response) {
      return this.dispatcher.trigger("box.command_response", {
        token: this.auth_key,
        callback: response
      });
    };

    return PrinterCommClass;

  })();

}).call(this);
